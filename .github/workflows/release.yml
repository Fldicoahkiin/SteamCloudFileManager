name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build-release:
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: Linux
            target: x86_64-unknown-linux-gnu
            asset: steam-cloud-file-manager-linux-x64
          - os: windows-latest
            name: Windows
            target: x86_64-pc-windows-msvc
            asset: steam-cloud-file-manager-windows-x64.exe
          - os: macos-latest
            name: macOS-Intel
            target: x86_64-apple-darwin
            asset: steam-cloud-file-manager-macos-intel
          - os: macos-latest
            name: macOS-ARM
            target: aarch64-apple-darwin
            asset: steam-cloud-file-manager-macos-arm

    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libxcb-shape0-dev libxcb-xfixes0-dev

      - name: Build Release
        run: cargo build --release --target ${{ matrix.target }} --locked

      - name: Prepare artifact
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            cp SteamCloudFileManager.exe ${{ matrix.asset }}
          else
            cp SteamCloudFileManager ${{ matrix.asset }}
            chmod +x ${{ matrix.asset }}
          fi
      
      - name: Create macOS DMG
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p dmg_tmp
          cp target/${{ matrix.target }}/release/${{ matrix.asset }} dmg_tmp/
          
          hdiutil create -volname "Steam Cloud File Manager" \
            -srcfolder dmg_tmp \
            -ov -format UDZO \
            ${{ matrix.asset }}.dmg
          
          rm -rf dmg_tmp
          
      - name: Upload artifact (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset }}.dmg
          path: ${{ matrix.asset }}.dmg
          
      - name: Upload artifact (non-macOS)
        if: matrix.os != 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset }}
          path: target/${{ matrix.target }}/release/${{ matrix.asset }}

  create-release:
    name: Create Release
    needs: build-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Get previous tag
        id: previoustag
        run: |
          PREVIOUS_TAG=$(git tag --sort=-version:refname | sed -n '2p')
          echo "previous_tag=${PREVIOUS_TAG}" >> $GITHUB_OUTPUT
          
      - name: Prepare Release Notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          PREVIOUS_TAG=${{ steps.previoustag.outputs.previous_tag }}
          
          sed "s/{VERSION}/$VERSION/g; s/{PREVIOUS_TAG}/$PREVIOUS_TAG/g" .github/release-template.md > release-notes.md
          
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*
          body_path: release-notes.md
          generate_release_notes: true
          draft: false
          prerelease: false
