name: CI

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.os_name }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            os_name: linux
            arch: x86_64
            target: x86_64-unknown-linux-gnu
            binary_name: steam-cloud-file-manager
          - os: windows-latest
            os_name: windows
            arch: x86_64
            target: x86_64-pc-windows-msvc
            binary_name: steam-cloud-file-manager.exe
          - os: macos-latest
            os_name: darwin
            arch: x86_64
            target: x86_64-apple-darwin
            binary_name: steam-cloud-file-manager
          - os: macos-latest
            os_name: darwin
            arch: aarch64
            target: aarch64-apple-darwin
            binary_name: steam-cloud-file-manager

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libxcb-shape0-dev libxcb-xfixes0-dev

      - name: Download dependencies
        run: cargo fetch --locked

      - name: Build
        run: |
          cargo build --release --target ${{ matrix.target }} --locked
          
      - name: List build artifacts
        run: |
          echo "=== Target directory structure ==="
          ls -la target/${{ matrix.target }}/release/
          echo "=== Looking for binary ==="
          find target/${{ matrix.target }}/release/ -maxdepth 1 -type f -name "SteamCloudFileManager*" -o -name "steam*"

      - name: Prepare binary
        shell: bash
        run: |
          mkdir -p dist
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/SteamCloudFileManager.exe dist/${{ matrix.binary_name }}
          else
            cp target/${{ matrix.target }}/release/SteamCloudFileManager dist/${{ matrix.binary_name }}
          fi
          echo "=== Files in dist directory ==="
          ls -la dist/
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os_name }}-${{ matrix.arch }}
          path: dist/${{ matrix.binary_name }}
          if-no-files-found: error

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release
          merge-multiple: true

      - name: List downloaded files
        run: |
          echo "=== All files in release directory ==="
          find release -type f
          echo "=== Files matching pattern ==="
          find release -name "steam-cloud-file-manager*" -type f
          echo "=== Directory tree ==="
          tree release || ls -laR release

      - name: Prepare release files
        run: |
          mkdir -p final-release
          find release -type f -name "steam-cloud-file-manager*" -exec cp {} final-release/ \;
          echo "=== Final release files ==="
          ls -la final-release/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            final-release/steam-cloud-file-manager
            final-release/steam-cloud-file-manager.exe
          fail_on_unmatched_files: false

  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libxcb-shape0-dev libxcb-xfixes0-dev

      - name: Download dependencies
        run: cargo fetch --locked

      - name: Run tests
        run: cargo test --locked

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy -- -D warnings
